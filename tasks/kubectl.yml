---
- name: Get latest kubectl version
  uri:
    url: https://dl.k8s.io/release/stable.txt
    return_content: yes
  register: version

- name: Create kubectl versioned directory
  file:
    path: /opt/kubectl-{{ version.content }}
    state: directory
  become: true

- name: Get remote kubectl checksum content
  uri:
    url: "https://dl.k8s.io/release/{{ version.content }}/bin/linux/amd64/kubectl.sha256"
    return_content: yes
  register: remote_checksum

- name: Check if local kubectl binary exists
  stat:
    path: "/opt/kubectl-{{ version.content }}/kubectl"
  register: kubectl_stat

- name: Get local kubectl sha256 (only if file exists)
  shell: "sha256sum /opt/kubectl-{{ version.content }}/kubectl | cut -d ' ' -f1"
  register: local_kubectl_shasum
  when: kubectl_stat.stat.exists

- name: Download kubectl only if missing or checksum differs
  uri:
    url: "https://dl.k8s.io/release/{{ version.content }}/bin/linux/amd64/kubectl"
    dest: "/opt/kubectl-{{ version.content }}/kubectl"
    mode: '0755'
  become: true
  when: >
    (not kubectl_stat.stat.exists)
    or (local_kubectl_shasum.stdout != remote_checksum.content)

- name: Assert that the kubectl binary is OK
  # Optional: If you want to fail if local file doesn't match remote,
  # even after the logic above. E.g. something changed externally, etc.
  block:
    - name: Get local kubectl sha256 again
      shell: "sha256sum /opt/kubectl-{{ version.content }}/kubectl | cut -d ' ' -f1"
      register: file_shasum

    - name: Assert the binary's checksum matches
      assert:
        that:
          - file_shasum.stdout == remote_checksum.content
        fail_msg: "Shasum does not correspond"
        success_msg: "kubectl shasum verified: ok"

- name: Create a symlink to kubectl
  file:
    src: "/opt/kubectl-{{ version.content }}/kubectl"
    dest: "/usr/bin/kubectl"
    state: link
  become: true
